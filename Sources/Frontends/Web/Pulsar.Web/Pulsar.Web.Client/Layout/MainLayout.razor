@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using Pulsar.Web.Client.Components.PushNotifications
@using Pulsar.Web.Client.Services.Authentication
@using Pulsar.Web.Client.Services.PushNotifications
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject UserService UserService
@inject IDialogService DialogService
@inject IMessageService MessageService
@inject PushNotificationManager PushNotificationManager
@inject IWebAssemblyHostEnvironment HostEnvironment

<AuthorizeView>
    <Authorized>
        <FluentLayout Style="overflow: hidden;">
            <FluentHeader>
                <img src="icons/logo-svg.svg" alt="Pulsar Logo" style="height: 30px; margin-right: 15px;" />
                <FluentBadge Fill="somevalue" BackgroundColor="#FFFFFF" Color="#000000" Height="25px">
                    <span style="padding-left: 10px; padding-right: 10px;">
                        @_headerLabel
                    </span>
                </FluentBadge>
                <div style="flex-grow: 1;"></div>
                <FluentCounterBadge Count="@_unread" BackgroundColor="@Color.Error" Color="Color.Fill">
                    <FluentButton BackgroundColor="rgba(0, 0, 0, 0)" OnClick="@ShowNotifications">
                        <FluentIcon Value="@(new Icons.Regular.Size24.Alert())" Color="@Color.Fill" />
                    </FluentButton>
                </FluentCounterBadge>
                <FluentSpacer Width="18" />
                <FluentProfileMenu Status="@null"
                @ref="_fluentProfileMenu"
                HeaderLabel="@_headerLabel"
                Initials="@_initials"
                FullName="@($"{_user?.PrimeiroNome} {_user?.UltimoNome}")"
                EMail="@_user?.Email"
                PopoverStyle="min-width: 330px;"
                HeaderButton="Sair"
                Image="@_user?.AvatarUrl"
                OnHeaderButtonClick="@(() => LogOff(context))"
                OnFooterLinkClick="@Configurations"
                FooterLink="Configurações" />
            </FluentHeader>
            <FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">
                <NavMenu />
                <FluentBodyContent Class="body-content">
                    <div class="content">
                        <FluentMessageBarProvider Section="MESSAGES_TOP"></FluentMessageBarProvider>
                        @Body
                    </div>

                    <FluentToastProvider MaxToastCount="10" />
                    <FluentDialogProvider />
                    <PushNotificationProvider OnNewNotification="OnNewNotification" />
                </FluentBodyContent>
            </FluentStack>
            <FluentFooter>
                <span>&#xA9; Pulsar 2024</span>
                <FluentSpacer />
                <a href="https://google.com" target="_blank">Ajuda</a>
            </FluentFooter>
        </FluentLayout>
    </Authorized>
    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>


<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private UserClaims? _user;
    private string? _headerLabel;
    private string? _initials;
    private FluentProfileMenu? _fluentProfileMenu;
    private int _unread = 0;

    protected override async Task OnInitializedAsync()
    {
        if (!HostEnvironment.IsProduction())
        {
            MessageService.ShowMessageBar(options =>
            {
                options.Title = "Ambiente";
                options.Body = $"Esta versão do Pulsar não é a versão do ambiente de produção. Ambiente: {HostEnvironment.Environment}.";
                options.Intent = MessageIntent.Warning;
                options.Section = "MESSAGES_TOP";
            });
        }
        
        FluentInputFile.ResourceLoadingCompleted = "Completado";
        FluentInputFile.ResourceLoadingCanceled = "Cancelado";
        FluentInputFile.ResourceLoadingInProgress = "Em progresso";

        SetUpUserChangedEvent();
        await InitializeUserData();
    }

    private void OnNewNotification()
    {
        _unread = PushNotificationManager.Unread;
        this.StateHasChanged();
    }

    private async Task ShowNotifications()
    {
        ClosePopover();

        await DialogService.ShowPanelAsync<PushNotificationsPanel>(new DialogParameters()
            {
                Title = "Notificações",
                Alignment = HorizontalAlignment.Right,
                DismissTitle = null,
                PrimaryAction = null,
                SecondaryAction = null
            });
    }

    private void SetUpUserChangedEvent()
    {
        UserService.UserChanged += async (sender, e) =>
        {
            await this.InitializeUserData();
            this.StateHasChanged();
        };
    }

    private async Task InitializeUserData()
    {
        this._user = await UserService.CurrentUser();
        if (this._user != null)
        {
            this._headerLabel = _user.IsSuperUsuario ? "ADMINISTRADOR" :
                (_user.DominioNome?.ToUpperInvariant() ?? _user.EstabelecimentoNome?.ToUpperInvariant());
            if (_user.IsSuperUsuario)
            {
                _initials = "AD";
            }
            else
            {
                _initials = GetFirstLetter(_user.PrimeiroNome) + GetFirstLetter(_user.UltimoNome);
            }
        }

        string GetFirstLetter(string? name)
        {
            if (name == null)
            {
                return string.Empty;
            }

            name = name.Trim();

            if (name.Length > 0)
            {
                return name[0].ToString().ToUpperInvariant();
            }
            else
            {
                return string.Empty;
            }
        }
    }

    private void LogOff(AuthenticationState state)
    {
        NavigationManager.NavigateTo(state.User.FindFirst("bff:logout_url")?.Value!, forceLoad: true);
    }
    private async Task Configurations()
    {
        ClosePopover();

        await DialogService.ShowPanelAsync<UserPanel>(new DialogParameters()
            {
                Title = "Dados do Usuário",
                Alignment = HorizontalAlignment.Right,
                DismissTitle = null,
                PrimaryAction = null,
                SecondaryAction = null
            });
    }
    public void ClosePopover()
    {
        var propertyInfo = _fluentProfileMenu?
        .GetType()
        .GetProperty("PopoverVisible",
            System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic);
        propertyInfo?.SetValue(_fluentProfileMenu, false);
    }
}    