@inject UserService UserService
@inject ProtectedSectionService ProtectedSectionService
@inject IToastService ToastService

<EditForm Model="@_meusDados" OnValidSubmit="@SaveDados" novalidate>
    <FluentValidationValidator />
    <FluentStack Orientation="Orientation.Vertical">
        <div style="width: 100%;">
            <FluentTextField @bind-Value="_meusDados.PrimeiroNome" Label="Primeiro Nome" Required style="width: 100%;" />
            <FluentValidationMessage For="@(() => _meusDados.PrimeiroNome)" />
        </div>
        <div style="width: 100%;">
            <FluentTextField @bind-Value="_meusDados.Sobrenome" Label="Último Nome" style="width: 100%;" />
            <FluentValidationMessage For="@(() => _meusDados.Sobrenome)" />
        </div>
        <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Loading="_isSaving.IsLoading">Salvar</FluentButton>
    </FluentStack>
</EditForm>

@code {
    EditarMeusDadosCmd _meusDados = new EditarMeusDadosCmd();
    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;
    public LoadingModel _isSaving = new();

    protected override async Task OnInitializedAsync()
    {
        var user = await UserService.CurrentUser();
        _meusDados.PrimeiroNome = user?.PrimeiroNome;
        _meusDados.Sobrenome = user?.UltimoNome;
    }

    private async Task SaveDados()
    {
        await ProtectedSectionService.Protect(async () =>
        {
            await UserService.EditarMeusDados(_meusDados);
            await Dialog.CloseAsync();
            ToastService.ShowSuccess("Dados do usuário modificado com sucesso.");
        }, _isSaving);
    }
}
