@using Pulsar.Web.Client.Services.Authentication
@using Pulsar.Web.Client.Services.Others
@inject UserService UserService
@inject ProtectedSectionService ProtectedSectionService
@inject IToastService ToastService
@inject IMessageService MessageService

<FluentStack Orientation="@Orientation.Vertical">
    <FluentSpacer />
    <FluentMessageBarProvider Section="MESSAGES_DIALOG" MaxMessageCount="1"></FluentMessageBarProvider>
    @if (_imgSrc == null)
    {
        <FluentInputFile Id="my-file-uploader"
                         Mode="InputFileMode.SaveToTemporaryFolder"
                         Multiple="false"
                         MaximumFileSize="@(500*1024)"
                         OnCompleted="@OnCompletedAsync"
                         @bind-ProgressPercent="@_progressPercent"
                         Style="height: 300px; border: 1px dashed var(--accent-fill-rest); width: 100%;"
                         Accept="image/png, image/jpeg, image/jpg">
            <ChildContent>
                <div style="margin-left: 15px; margin-right: 15px;">
                    <label for="my-file-uploader">
                        <FluentIcon Value="@(new Icons.Regular.Size24.ArrowUpload())" />
                    </label>

                    <div>
                        Arraste o arquivo que você deseja
                        ou <label for="my-file-uploader">selecione</label>
                        o arquivo<span style="color: red;">*</span>.
                    </div>

                    <div style="margin-top: 20px">
                        Máximo de 500 KB.
                    </div>
                </div>
            </ChildContent>
        </FluentInputFile>
    }

    @if (_imgSrc != null)
    {
        <img src="@_imgSrc" style="width: 100%; border: 1px dashed var(--accent-fill-rest);" />

        <FluentStack Orientation="Orientation.Horizontal">
            <FluentButton Appearance="Appearance.Outline" Loading="_isSaving.IsLoading" OnClick="@CleanImage">Limpar</FluentButton>
            <FluentButton Appearance="Appearance.Accent" Loading="_isSaving.IsLoading" OnClick="@SaveImage">Salvar</FluentButton>
        </FluentStack>
    }
</FluentStack>

@code {
    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    private string? _imgSrc = null;
    public LoadingModel _isSaving = new();
    private int _progressPercent = 0;
    private string? _contentType = null;
    private FileInfo? _fileInfo = null;

    private async Task OnCompletedAsync(IEnumerable<FluentInputFileEventArgs> files)
    {
        var file = files.FirstOrDefault();

        if (file != null && file.LocalFile != null)
        {
            using var fs = file.LocalFile.OpenRead();
            using var memoryStream = new MemoryStream();
            await fs.CopyToAsync(memoryStream);
            var data = memoryStream.ToArray();
            var base64 = Convert.ToBase64String(data);
            _imgSrc = $"data:{file.ContentType};base64, {base64}";
            _contentType = file.ContentType;
            _fileInfo = file.LocalFile;
        }
    }

    protected override void OnInitialized()
    {
        MessageService.Clear("MESSAGES_DIALOG");
        base.OnInitialized();
    }

    private void CleanImage()
    {
        _fileInfo?.Delete();
        _imgSrc = null;
        _progressPercent = 0;
        _contentType = null;
        _fileInfo = null;
    }

    private async Task SaveImage()
    {
        await ProtectedSectionService.ProtectDialog(async () =>
        {
            await UserService.MudarMeuAvatar(_contentType!, _fileInfo!);
            _fileInfo?.Delete();
            await Dialog.CloseAsync();
            ToastService.ShowSuccess("Imagem modificada com sucesso.", timeout: 5000);
        }, _isSaving);
    }
}
